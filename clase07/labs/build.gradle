plugins {
    id 'java'
    id 'groovy'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.circulosiete.curso.testing'
version = '1.0-SNAPSHOT'
description = 'Clase07'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

ext {
    groovyVersion = '4.0.28'
    spockVersion = '2.4-M6-groovy-4.0'
    testcontainersVersion = '1.21.3'
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Database
    runtimeOnly 'org.postgresql:postgresql'

    // Flyway
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'

    // Groovy + Spock
    testImplementation "org.apache.groovy:groovy:$groovyVersion"
    testImplementation "org.spockframework:spock-core:$spockVersion"
    testImplementation "org.spockframework:spock-spring:$spockVersion"

    // Testcontainers
    testImplementation "org.testcontainers:junit-jupiter:$testcontainersVersion"
    testImplementation "org.testcontainers:spock:$testcontainersVersion"
    testImplementation "org.testcontainers:postgresql:$testcontainersVersion"

    // Spring Boot Test + Testcontainers
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'

    // RestAssured
    testImplementation 'io.rest-assured:rest-assured'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    // equivalente a includes en Surefire
    include '**/*Test.class', '**/*Spec.class'
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'BUNDLE'
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

tasks.withType(GroovyCompile) {
    groovyOptions.encoding = 'UTF-8'
}
